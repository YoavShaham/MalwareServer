const app = require('../app/app')
require('dotenv').config()
const axios = require('axios')
const { expect } = require("chai");
const parse_files = require('../repository/parsefiles')
const repository = require('../repository/repository')


describe('DB API', () => {  
  const testName = {
    'status' : '200',
    'rows': [
      {
      'NAME': 'BITS Jobs',
      'ID': 'attack-pattern--c8e87b83-edbb-48d4-9295-4974897525b7',
      'DESCRIPTION': `Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM). (Citation: Microsoft COM) (Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.

      The interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001)  (Citation: Microsoft BITS) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool. (Citation: Microsoft BITSAdmin)
      
      Adversaries may abuse BITS to download, execute, and even clean up after running malicious code. BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. (Citation: CTU BITS Malware June 2016) (Citation: Mondok Windows PiggyBack BITS May 2007) (Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). (Citation: PaloAlto UBoatRAT Nov 2017) (Citation: CTU BITS Malware June 2016)
      
      BITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). (Citation: CTU BITS Malware June 2016)`,
      'X_MITRE_PLATFORMS': 'Windows',
      'X_MITRE_DETECTION': `BITS runs as a service and its status can be checked with the Sc query utility (<code>sc query bits</code>). (Citation: Microsoft Issues with BITS July 2011) Active BITS tasks can be enumerated using the [BITSAdmin](https://attack.mitre.org/software/S0190) tool (<code>bitsadmin /list /allusers /verbose</code>). (Citation: Microsoft BITS)

      Monitor usage of the [BITSAdmin](https://attack.mitre.org/software/S0190) tool (especially the ‘Transfer’, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options)  (Citation: Microsoft BITS)Admin and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database. (Citation: CTU BITS Malware June 2016)
      
      Monitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account). (Citation: Microsoft BITS)`,
      'PHASE_NAME': 'defense-evasion,persistence'
      }
    ]
  }

  let test_repository = {
    getAttacks (keyword, colum) {
      return Promise.resolve(testName)
    }
  }


  // before the tests are running, setting up the server 
  before(async () => {
    let rep
    await parse_files.parse_attacks(process.env.ATTACKS_FILES_DIR_PATH, process.env.DB_PATH)
    .then(
    await repository.db_connect(process.env.DB_PATH)
    .then(repo =>{
        rep = repo
        const serv = Promise.resolve(app.initialize_app({
          port: process.env.DB_SERVICE_PORT,
          repo: test_repository
        }));
    }))
    })

  after(() => {
    app.dissconect_app()
  })

  it('test name scan', async () => {
      const res = await axios.post(`http://localhost:${process.env.DB_SERVICE_PORT}/getAttacks`,
        {
          'params':{
            'keyword': 'NAME',
            'colum': 'BITS Jobs'
          }
        }
    ).then(res => res.data)
    expect(res.status).equal(testName.status);
    expect(res.rows[0].NAME).equal(testName.rows[0].NAME);
    expect(res.rows[0].ID).equal(testName.rows[0].ID);
    expect(res.rows[0].DESCRIPTION).equal(testName.rows[0].DESCRIPTION);
    expect(res.rows[0].X_MITRE_DETECTION).equal(testName.rows[0].X_MITRE_DETECTION);
    expect(res.rows[0].X_MITRE_PLATFORMS).equal(testName.rows[0].X_MITRE_PLATFORMS);
    expect(res.rows[0].PHASE_NAME).equal(testName.rows[0].PHASE_NAME);
    
    })
})