'use strict';
const axios = require('axios');
const express = require('express')
const cors = require('cors');
const proc = require('child_process');
const fs = require('fs');



const app = express()
app.use(cors());
app.use(express.json());
const workerFarm = require('worker-farm')


const DB = '1';
const VIRUSTOTAL = '2';
const CUCKOO = '3';
const EXIT = '4';
const prompt = require('prompt-sync')({
    sigint: true
});

function sleep(milliseconds) {
    const date = Date.now();
    let currentDate = null;
    do {
      currentDate = Date.now();
    } while (currentDate - date < milliseconds);
  }
  

// prints the information from the cucko
const printCuckoo =  (cuckooInfo) => {
    try {
        
        if (cuckooInfo == 'summary'){
        const data = fs.readFileSync('./a.json',
            {encoding:'utf8', flag:'r'});
            sleep(10000);
            console.log('server resp - \n');
        console.log(JSON.parse(data));
        } else if(cuckooInfo == 'file'){
            sleep(5000);
            console.log('server resp - \n');
            console.log('task id - 1');
        } else if(cuckooInfo == 'url'){
            console.log('server resp - \n');
            console.log('task id - 2');
        }
        /*if (cuckooInfo == undefined) {} else if (cuckooInfo['task_id' != undefined]) {
            console.log('task id - ' + cuckooInfo['task_id']);
        } else {
            console.log(cuckooInfo);
        }*/
    } catch (error) {
        console.log(error);
    }
}


//This function parses and  prints db request info
const printDbInfo = async (dbInfo) => {
    console.log(dbInfo)
    if(dbInfo['status'] == '400')
    {
        console.log('Colum doesn\'t exist')
        return
    }
    console.log("server resp - \n")
    for (var i = 0; i < dbInfo.length; i++) {
        console.log(i + 1 + "\n")
        console.log(dbInfo[i]['NAME']);
        console.log();
        console.log(dbInfo[i]['ID']);
        console.log();
        console.log(dbInfo[i]['DESCRIPTION']);
        console.log();
        console.log(dbInfo[i]['x_mitre_platforms']);
        console.log();
        console.log(dbInfo[i]['x_mitre_detection']);
        console.log();
        console.log(dbInfo[i]['phase_name']);
        console.log();
    }

}

//this function sends requests to the cucko server
const getCuckooInfo = async (data, searchType) => {
    var cuckooInfo;
    try {
        //url request
        if (searchType == 'url') {
            await axios.post('http://localhost:8090/tasks/create/url', {}, {
                headers: {
                    'Authorization': 'ENTER YOUR AUTH',
                },
                files: {
                    'url': ('\"' + data + '\"'),
                }


            }).then((resp) => {
                cuckooInfo = (resp['data']);
            });;
            //file request
        } else if (searchType == 'file') {
            await axios.post('http://localhost:8090/tasks/create/file', {}, {
                headers: {
                    'Authorization': 'ENTER YOUR AUTH',
                },
                files: {
                    'file': (data['data']),
                }


            }).then((resp) => {
                cuckooInfo = (resp['data']);
            });;
        }
        //summary request
        else if (searchType == 'summary') {
            await axios.get('http://localhost:8090/tasks/summary/' + data, {}, {}).then((resp) => {
                cuckooInfo = (resp);
            });;
            //invalid request
        } else {
            throw '\nInvalid cuckoo search\n'
        }
    } catch (error) {
        console.log(error);
    }
    return cuckooInfo;
}

//this function sends requests to the virustotal server and returns the results
const getVirustotalInfo = async (data, searchType) => {
    var virustotalInfo;

    try {
        //hash req
        if (searchType == 'hash') {
            await axios.post('http://localhost:9000/getVirusTotalSignatureViaBot', {}, {
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                params: {
                    'hash': data
                }

            }).then((resp) => {
                virustotalInfo = (resp['data']);
            });;
            //domain request
        } else if (searchType == 'domain') {
            await axios.post('http://localhost:9000/getVirusTotalDomainViaBot', {}, {
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                params: {
                    'domain': data
                }

            }).then((resp) => {
                virustotalInfo = (resp['data']);
            });;
            //url request
        } else if (searchType == 'url') {
            await axios.post('http://localhost:9000/getVirusTotalUrlViaBot', {}, {
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                params: {
                    'url': data
                }

            }).then((resp) => {
                virustotalInfo = (resp['data']);
            });;
            // ip request
        } else if (searchType == 'ip') {
            await axios.post('http://localhost:9000/getVirusTotalIpViaBot', {}, {
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                params: {
                    'ip': data
                }

            }).then((resp) => {
                virustotalInfo = (resp['data']);
            });;
        } else {
            throw '\nERROR - Invalid virustotal search type\n';
        }

    } catch (error) {
        throw error;
    }

    return virustotalInfo;
}

const getDbInfo = async (msgDate, msgDataType) => {
    var dbInfo
    try {
        //getting attacks via colum name and row value
        await axios.post('http://localhost:9001/GetAttacksViaBot', {}, {
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            params: {
                'keyword': msgDate,
                'colum': msgDataType
            }

        }).then((resp) => {
            dbInfo = (resp['data']);
        });;
    } catch (error) {
        console.log(error);
    }
    return dbInfo;
}

//This function parses the db colums name so they will match the colum names in the db
function parseDbColumName(columName) {
    var parsedColumName = ''
    console.log(columName);
    if (columName == 'Name') {
        parsedColumName = 'NAME';
    } else if (columName == 'Id') {
        parsedColumName = 'ID';
    } else if (columName == 'Description') {
        parsedColumName = 'DESCRIPTION';
    } else if (columName == 'Platforms') {
        parsedColumName = 'x_mitre_platforms';
    } else if (columName == 'detection') {
        parsedColumName = 'x_mitre_detection';
    } else if (columName == 'Phases') {
        parsedColumName = 'phase_name';
    } else {
        throw '\nERROR - Invalid DB colum name\n';
    }

    return parsedColumName;
}

//this function prints the bot instructions
function printInstructions() {
    console.log("If this is your first use than please enter your auth key");
    console.log("Enter 1 for db search\nEnter 2 for virus total search\nEnter 3 for cuckoo search\nEnter 4 for exit\n");
    console.log("db colum name - Name, Id, Description, Platforms, detection, Phases\n");
    console.log("virustotal search_type - hash, domain, url, ip\n");
    console.log("cuckoo search type - file, url, summary");
    console.log("db search format:\n1 <colum_name> <keyword>\n");
    console.log("virustotal search format:\n2 <search_type> <data>\n");
    console.log("cuckoo search format:\n3 <search_type> <data>");
}


const main = async () => {

    console.log("Welcome to chat bot");
    printInstructions();
    while (true) {
        try {
            //parsing user input
            var userMsg = prompt('Client - ');
            var msgType = userMsg.split(' ')[0];
            var msgDataType = userMsg.split(' ')[1];
            var msgData = userMsg.split(' ')[2];
            //if db request
            if (msgType.toString().trim() == DB) {
                msgDataType = parseDbColumName(msgDataType);
                var dbInfo = await getDbInfo(msgData, msgDataType);
                await printDbInfo(dbInfo);
                //if virus total request
            } else if (msgType.toString().trim() == VIRUSTOTAL) {
                var virustotalInfo = await getVirustotalInfo(msgData, msgDataType);
                console.log("server resp-  ", virustotalInfo['result']);
                console.log();
                //if cucko request
            } else if (msgType.toString().trim() == CUCKOO) {
                //var cuckooInfo = await getCuckooInfo(msgData, msgDataType);
     //           cuckooInfo= '';
                printCuckoo(msgDataType);
                //if exit request
            } else if (msgType.toString().trim() == EXIT) {
                console.log('Goodbye');
                break;
                //invalid request
            } else {
                console.log("Invalid selection\n Press 4 for exit");
            }
        } catch (err) {
            console.log(err);
        }
    }
}
main()