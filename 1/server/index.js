const express = require('express')
const cors = require('cors');
const nvt = require('node-virustotal');

const sqlite3 = require('sqlite3').verbose();
const app = express()

app.use(cors());
app.use(express.json());

let db = new sqlite3.Database('./attacks.sqlite', (err) => {
    if (err) {
        console.error(err.message);
    }
    console.log('Connected to the database.');
});


//site getting attacks
app.post('/getAttacks', (req, res) => {
    console.log(req);
    var keyword = req.body.keyword;
    var colum = req.body.colum;
    var query = "SELECT * FROM ATTACKS WHERE " + colum + " LIKE \"%" + keyword + "%\";"
    console.log(query);
    db.all(query, [], (err, rows) => {
        if (err) {
            console.log(err);
        } else {
            console.log(rows);
            res.send(rows);

        }
    });
})
//bot get attacks by colum name and row value
app.post('/GetAttacksViaBot', (req, res) => {
    var keyword = req.query.keyword;
    var colum = req.query.colum;
    var query = "SELECT * FROM ATTACKS WHERE " + colum + " LIKE \"%" + keyword + "%\";"
    console.log(query);
    db.all(query, [], (err, rows) => {
        if (err) {
            console.log(err);
        } else {
            console.log(rows);
            res.send(rows);

        }
    });
})

//This function gets virustotal data via signature
app.post('/getVirusTotalSignatureViaBot', (req, res) => {
    var results;
    var hash = req.query.hash;
    const defaultTimedInstance = nvt.makeAPI().setKey('bc9b42cf3bbaf3ffe4ae7f538b34774310fa49e4614d48a90ccbb171a9e553bc');
    const theSameObject = defaultTimedInstance.fileLookup(hash, function(err, result) {
        if (err) {
            console.log(err);
            results = {
                "result": "hash doesn't exist"
            };
            res.send(results);
            return;
        } else {
            //if there is more than 1 malicious result than the result is malicious
            if (JSON.parse(result)['data']['attributes']['last_analysis_stats']['malicious'] > 0) {
                results = {
                    "result": "malicious"
                }
            } else {
                results = {
                    "result": "undetected"
                }
            }
        }
        res.send(results);
        return;
    });

})

//This function gets virustotal data via bot 
app.post('/getVirusTotalDomainViaBot', (req, res) => {
    var results;
    var domain = req.query.domain;
    const api_request = nvt.makeAPI().setKey('bc9b42cf3bbaf3ffe4ae7f538b34774310fa49e4614d48a90ccbb171a9e553bc');
    const theSameObject = api_request.domainLookup(domain, function(err, result) {
        if (err) {
            console.log(err);
            results = {
                "result": "domain doesn't exist"
            };
            res.send(results);
            return;
        } else {
            //if there is more than 1 malicious result than the result is malicious
            if (JSON.parse(result)['data']['attributes']['last_analysis_stats']['malicious'] > 0) {
                results = {
                    "result": "malicious"
                }
            } else {
                results = {
                    "result": "undetected"
                }
            }
        }
        res.send(results);
        return;
    });

})

//This function gets virustotal data via url
app.post('/getVirusTotalUrlViaBot', (req, res) => {
    var results;
    console.log(req.query)
    var url = nvt.sha256(req.query.url);
    const defaultTimedInstance = nvt.makeAPI().setKey('bc9b42cf3bbaf3ffe4ae7f538b34774310fa49e4614d48a90ccbb171a9e553bc');
    const theSameObject = defaultTimedInstance.urlLookup(url, function(err, result) {
        if (err) {
            console.log(err);
            results = {
                "result": "url doesn't exist"
            };
            res.send(results);
            return;
        } else {
            //if there is more than 1 malicious result than the result is malicious
            if (JSON.parse(result)['data']['attributes']['last_analysis_stats']['malicious'] > 0) {
                results = {
                    "result": "malicious"
                }
            } else {
                results = {
                    "result": "undetected"
                }
            }
        }
        res.send(results);
        return;
    });

})

//This function gets virustotal data via ip
app.post('/getVirusTotalIpViaBot', (req, res) => {
    var results;
    var ip = req.query.ip;
    const defaultTimedInstance = nvt.makeAPI().setKey('bc9b42cf3bbaf3ffe4ae7f538b34774310fa49e4614d48a90ccbb171a9e553bcS');
    const theSameObject = defaultTimedInstance.ipLookup(ip, function(err, result) {
        if (err) {
            console.log(err);
            results = {
                "result": "ip doesn't exist"
            };
            res.send(results);
            return;
        } else {
            //if there is more than 1 malicious result than the result is malicious
            if (JSON.parse(result)['data']['attributes']['last_analysis_stats']['malicious'] > 0) {
                results = {
                    "result": "malicious"
                }
            } else {
                results = {
                    "result": "undetected"
                }
            }
        }
        res.send(results);
        return;
    });

})


app.listen(9000, () => {
    console.log("connected to server");
})