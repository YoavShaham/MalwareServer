[{"/home/yoav/Documents/MalwareServer/web-application/src/index.js":"1","/home/yoav/Documents/MalwareServer/web-application/src/App.js":"2","/home/yoav/Documents/MalwareServer/web-application/src/reportWebVitals.js":"3","/home/yoav/Documents/MalwareServer/web-application/src/db.js":"4","/home/yoav/Documents/MalwareServer/web-application/src/home.js":"5","/home/yoav/Documents/MalwareServer/web-application/src/virustotal.js":"6"},{"size":571,"mtime":1665983406102,"results":"7","hashOfConfig":"8"},{"size":849,"mtime":1666209749205,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1665782361131,"results":"10","hashOfConfig":"8"},{"size":4067,"mtime":1666247810733,"results":"11","hashOfConfig":"8"},{"size":318,"mtime":1666209711561,"results":"12","hashOfConfig":"8"},{"size":3577,"mtime":1666209803355,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gq5ehk",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/yoav/Documents/MalwareServer/web-application/src/index.js",[],["29","30"],"/home/yoav/Documents/MalwareServer/web-application/src/App.js",[],"/home/yoav/Documents/MalwareServer/web-application/src/reportWebVitals.js",[],"/home/yoav/Documents/MalwareServer/web-application/src/db.js",["31","32"],"import './App.css';\nimport * as React from 'react';\nimport { experimentalStyled as styled, Experimental_CssVarsProvider } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button'\nimport Grid from '@mui/material/Grid';\nimport Axios from 'axios'\n\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n  ...theme.typography.body2,\n  padding: theme.spacing(2),\n  textAlign: 'left',\n  color: theme.palette.text.secondary,\n}));\n\nconst DB = () => {\n  const [requestType, setRequestType] = React.useState(''); \n  const [requestValue, setRequestValue] = React.useState(''); \n  const [attacks, setAttacks] = React.useState([]);\n  const [isAttacks, setIsAttacks] = React.useState(true);\n\n  const handleSelectChange = (event) => {\n    setRequestType(event.target.value);\n  };\n  \n  const handleTextChange = (event) => {\n    setRequestValue(event.target.value);\n  };\n\n  const ConductQuery = () =>{\n    getDbAtacksViaKeyword();\n  };\n\n  const CheckAttacks = () => {\n    if(isAttacks === true){\n      return ''\n    }\n    else{\n      return <Item>No result matches query</Item>\n    }\n  };\n\n  const getDbAtacksViaKeyword = () =>{\n    Axios.post('http://localhost:9001/getAttacks', {\n      keyword: requestValue ,\n      colum: requestType\n    }).then((resp) => {\n      if(resp.data['rows'] !== undefined){\n        setAttacks(resp.data['rows']);\n        if(resp.data['rows'].length > 0){\n          setIsAttacks(true)\n        }\n        else{\n          setIsAttacks(false)\n        }\n      }\n    });\n  };\n\n  return(\n    <div className='db'>\n      <p>\n        This is an attack search service\n      </p>\n      <p>\n        You cand search the db by specifing the colum name(Name, Id, Description, Platforms, Detection, Phase) and the keyword\n      </p>\n      <FormControl sx={{ m: 1, minWidth: 120 }} size=\"small\">\n        <InputLabel id=\"demo-select-small\">Request Type</InputLabel>\n        <Select\n          labelId=\"demo-select-small\"\n          id=\"demo-select-small\"\n          value={requestType}\n          label=\"Request Type\"\n          onChange={handleSelectChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={\"NAME\"}>Name</MenuItem>\n          <MenuItem value={\"ID\"}>Id</MenuItem>\n          <MenuItem value={\"DESCRIPTION\"}>Description</MenuItem>\n          <MenuItem value={\"X_MITRE_PLATFORMS\"}>Platforms</MenuItem>\n          <MenuItem value={\"X_MITRE_DETECTION\"}>Detection</MenuItem>\n          <MenuItem value={\"PHASE_NAME\"}>Phases</MenuItem>\n        </Select>\n      </FormControl>\n      <TextField\n        id=\"request_value_input\"\n        label=\"Request Value\"\n        value={requestValue}\n        onChange={handleTextChange}\n      />\n      <Button onClick={ConductQuery}>Conduct query</Button>\n      <Grid\n      container\n      direction=\"column\"\n      justifyContent=\"space-evenly\"\n      alignItems=\"flex-start\"\n      > \n        <div>{CheckAttacks()}</div>\n\n        {attacks.map((val, key) => {\n          return(\n            <Grid Item >\n              <Grid\n              container\n              direction=\"column\"\n              justifyContent=\"space-around\"\n              alignItems=\"flex-start\"\n              >\n              <Item>Index: {key + 1}</Item>\n              <Item>Name: {val['NAME']} </Item>\n              <Item>Id: {val['ID']} </Item>\n              <Item>Description: {val['DESCRIPTION']} </Item>\n              <Item>Platforms: {val['X_MITRE_PLATFORMS']} </Item>\n              <Item>Detection: {val['X_MITRE_DETECTION']} </Item>\n              <Item>Phase: {val['PHASE_NAME']} </Item>\n              </Grid>\n            </Grid>\n          )\n        })}\n      </Grid>\n    </div>\n  )\n}\n\n\nexport default DB;","/home/yoav/Documents/MalwareServer/web-application/src/home.js",[],"/home/yoav/Documents/MalwareServer/web-application/src/virustotal.js",["33","34","35","36"],"import './App.css';\nimport Axios from 'axios'\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button'\n\n\n\nconst VirusTotal = () => {\n  const [requestType, setRequestType] = React.useState(''); \n  const [requestValue, setRequestValue] = React.useState(''); \n  const [result, setResult] = React.useState(\"\");\n  \n    const handleSelectChange = (event) => {\n      setRequestType(event.target.value);\n    };\n\n    const handleTextChange = (event) => {\n      setRequestValue(event.target.value);\n    };\n\n    const ConductQuery = (event) => {\n      if(requestType == 'domain'){\n        SearchVirusTotalDomain()\n      }else if (requestType == 'ip'){\n        SearchVirusTotalIp()\n      }else if (requestType == 'url'){\n        SearchVirusTotalUrl()\n      }else if(requestType == 'hash'){\n        SearchVirusTotalHash()\n      }\n    }\n\n    const SearchVirusTotalDomain = () => {\n      Axios.post('http://localhost:9000/getVirusTotalDomainViaBot', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      params: {\n        'domain': requestValue\n      }\n    })\n    .then((resp) => {\n      setResult(resp.data['result'])\n    });    \n  }\n  \n  const SearchVirusTotalIp = () => {\n    Axios.post('http://localhost:9000/getVirusTotalIpViaBot', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    params: {\n      'ip': requestValue\n    }\n  })\n  .then((resp) => {\n    setResult(resp.data['result'])\n  });    \n}\n\nconst SearchVirusTotalHash = () => {\n  Axios.post('http://localhost:9000/getVirusTotalHashViaBot', {\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  params: {\n    'hash': requestValue\n  }\n})\n.then((resp) => {\n  setResult(resp.data['result'])\n});    \n}\n\nconst SearchVirusTotalUrl = () => {\n  Axios.post('http://localhost:9000/getVirusTotalUrlViaBot', {\n  headers: {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*'\n  },\n  params: {\n    'url': requestValue\n  }\n})\n.then((resp) => {\n  setResult(resp.data['result'])\n});    \n}\n\n  return (\n    <div className='virustotal'>\n        <p>This is a virus total api service</p>\n        <p>You can conduct queries based on: url, ip, domain and hash</p>\n        <FormControl sx={{ m: 1, minWidth: 120 }} size=\"small\">\n        <InputLabel id=\"demo-select-small\">Request Type</InputLabel>\n        <Select\n          labelId=\"demo-select-small\"\n          id=\"demo-select-small\"\n          value={requestType}\n          label=\"Request Type\"\n          onChange={handleSelectChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={\"ip\"}>Ip</MenuItem>\n          <MenuItem value={\"domain\"}>Domain</MenuItem>\n          <MenuItem value={\"hash\"}>Hash</MenuItem>\n          <MenuItem value={\"url\"}>Url</MenuItem>\n        </Select>\n      </FormControl>\n      <TextField\n        id=\"request_value_input\"\n        label=\"Request Value\"\n        value={requestValue}\n        onChange={handleTextChange}\n      />\n      <Button onClick={ConductQuery}>Conduct query</Button>\n      <Box component=\"div\" sx={{ whiteSpace: 'normal' }}>\n      {result}\n      </Box>\n\n    </div>\n  )\n}\n\nexport default VirusTotal",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":3,"column":40,"nodeType":"43","messageId":"44","endLine":3,"endColumn":68},{"ruleId":"41","severity":1,"message":"45","line":4,"column":8,"nodeType":"43","messageId":"44","endLine":4,"endColumn":11},{"ruleId":"46","severity":1,"message":"47","line":28,"column":22,"nodeType":"48","messageId":"49","endLine":28,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":30,"column":29,"nodeType":"48","messageId":"49","endLine":30,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":32,"column":29,"nodeType":"48","messageId":"49","endLine":32,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":34,"column":28,"nodeType":"48","messageId":"49","endLine":34,"endColumn":30},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'Experimental_CssVarsProvider' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]